/** License (BSD Style License):
 *  Copyright (c) 2010
 *  Software Engineering
 *  Department of Computer Science
 *  Technische Universität Darmstadt
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  - Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *  - Neither the name of the Software Engineering Group or Technische 
 *    Universität Darmstadt nor the names of its contributors may be used to 
 *    endorse or promote products derived from this software without specific 
 *    prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
package de.tud.cs.se.flashcards.model;

/**
 * Interface for treating all components in a {@link FlashcardSeries} uniformly.
 * 
 * @author Manuel Weiel
 * @author Johannes Lerch
 * @author Ralf Mitschke
 */
public interface IFlashcardSeriesComponent {

	/**
	 * This function calculates the total number of flashcards contained in this
	 * component and all descendants in the hierarchy of this component.
	 */
	public int numberOfCards();

	/**
	 * Calculates the average learn progress of all cards contained in this
	 * component (including cards of sub-components). The learn progress of a
	 * Flashcard is determined by the index of the bin the card currently
	 * resides in. For example, a card that was never learned starts in bin #1
	 * and is moved to bin #2 if it was successfully learned once.
	 * 
	 * The progress is calculated as a percentage, where the first bin indicates
	 * 0% and the last bin indicates 100%.
	 * 
	 * @return average of the learn progress of all contained cards normalized
	 *         to the range [0,1]
	 */
	public float learnProgress();

	/**
	 * This method determines if a given component is contained in the current
	 * component. A component always contains itself.
	 * 
	 */
	public boolean contains(IFlashcardSeriesComponent component);

	/**
	 * This method is called by <code>Store</code> to restore internal listeners
	 * after deserialization. A listener can be part of the UI or a
	 * non-serializable object and therefore should not be serialized. Any
	 * listeners required as internal state of classes implementing this
	 * interface must be restored by this method. <br/>
	 * <b>Note:</b> fields can be marked as <b>transient</b> to ensure that they
	 * are not serialized.
	 */
	public void initializeListeners();

}
